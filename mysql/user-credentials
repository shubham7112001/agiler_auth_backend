const mysql = require('mysql2');
const bcrypt = require('bcryptjs');
const CustomError = require('../error-handlings/CustomError');
const asyncHandler = require('../error-handlings/async-handler');
const emailVerification = require('../utilities/email-verification');


const tableName = "login_credentials";

const connection = mysql.createPool({
  host:  process.env.HOST,
  user:  process.env.USER_NAME,
  password: process.env.PASSWORD,
  database: process.env.LOGIN_DB,
  });
  connection.promise().query(
    `
    CREATE TABLE if not exists ${tableName} (
        id INT PRIMARY KEY AUTO_INCREMENT,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `
  )

  
    // ADD USER
  app.post('/users/add', asyncHandler (async (req,res)=>{
    try{
        const {email,password} =  req.body;

        // To hashing password
        let hashedPassword =  await  new Promise((resolve, reject) => {
            bcrypt.hash(password, 8, (err, hash) => {
                if (err) {
                    console.log('Error occurred while hashing password' + err);
                    return new CustomError(err);
                    // reject(err);
                } else {
                    resolve(hash);
                }
            });
        });
        await connection.promise().query(
            `
            Insert into ${tableName} (email, password)
            values (?,?)
            `,
            [email, hashedPassword]
            );
            
            res.status(202).json(
            {
                message : "Success",
                data : {
                    email : email,
                    password : hashedPassword
                }
            }
        )
    }
    catch(error){
        console.log('Error catch:', error);
        res.status(500).json(new CustomError(error));
        return new CustomError(error);
    }
  }));


  // GET USER
  app.get('/users/:id',asyncHandler(async (req, res) =>{
    try{
        let {id} = req.params;
        id = parseInt(id);
        const data = await connection.promise().query(
            `
            Select email, password from ${tableName} where id = ?
            `,
            [id]
        )
        // console.log(data[0][0].email);
        // console.log(data[0][0]);
        if(data[0].length === 0) {
            return res.status(404).json({
                status : "Success",
                message : `User with id ${id} not exists`
            })
        }
        console.log(data.length);

        // const val = bcrypt.compare(input, data[0][0].password);


        // let decryptedPassword =  await  new Promise((resolve, reject) => {
        //     bcrypt.compare(input,data[0][0].password, (err, res) => {
        //         if (err) {
        //             console.log('Error occurred while hashing password' + err);
        //             return new CustomError(err);
        //             // reject(err);
        //         } else {
        //             resolve(res);
        //         }
        //     });
        // });
        // console.log("Decrypted Password => ",decryptedPassword);

        res.status(200).json({
            status : "success",
            data : data[0]
        })
        


    }
    catch(error){
        console.log("Error catched : ", error);
        return new CustomError(error);
    }
  }));


  // FORGOT PASSWORD
  app.patch('/users/update',(req,res) => {
    try{
        const {email} = req.body;
        const [data] = connection.promise().query(
            `
            Select * from ${tableName} where email = ? 
            `,
            [email]

        );
        if(data[0].length === 0) {
            return res.status(404).json({
                status : "success",
                message : `User with email ${email} not exists`
            });
        }
        

    }
    catch{

    }
  })



